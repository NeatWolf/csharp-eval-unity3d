<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<OutputType>Library</OutputType>
	</PropertyGroup>
	<PropertyGroup>
		<TargetFrameworks>net35;net45;netstandard1.3;netcoreapp2.0</TargetFrameworks>
		<Authors>Denis Zykov</Authors>
		<Version>2.2.1</Version>
		<PackageId>GameDevWare.Dynamic.Expressions</PackageId>
		<Product>GameDevWare.Dynamic.Expressions</Product>
		<Description>C# expression parsing and execution library. 
Designed for AOT runtimes (Unity's IL2CPP, .NET Native, Mono AOT).</Description>
		<Company />
		<ApplicationIcon />
		<OutputTypeEx>library</OutputTypeEx>
		<StartupObject />
		<AssemblyVersion>2.2.1</AssemblyVersion>
		<FileVersion>2.2.1</FileVersion>
		<SignAssembly>true</SignAssembly>
		<PublicSign Condition=" '$(OS)' != 'Windows_NT' ">true</PublicSign>
		<AssemblyOriginatorKeyFile>sn.snk</AssemblyOriginatorKeyFile>
		<DelaySign>false</DelaySign>
		<PackageReleaseNotes># 2.2.1
* fixed IL2CPP compilation error due _Attribute interface complilation failure
* added few interfaces to AOT.cs file for better AOT coverage

# 2.2.0
Features
* added support for void expressions (Action&lt;&gt; delegates)
* added support of '.NET Standart 1.3' and '.NET Core 2.0' platforms

# 2.1.4
Features
* added more descriptive message to member binding error
* added autodoc comments for public members
* hidden ReadOnlyDictionary from public access
* removed WEBGL check for later version of Unity, because unsigned types bug was fixed
* added generic types and generic methods
* added nullable types via '?' suffix
* added lambda expression syntax '() =&gt; x' and 'new Func(a =&gt; x)'
* added support for expression parameter re-mapping with lambda syntax at beggining of expression
* added support for Func&lt;&gt; lambdas on AOT environments
* added additional constructor to Binder class
* added ArgumentsTree ToString method
* added build-in types aliases support during static members binding

Bug Fixes
* fixed error with wrongly resolved types (only by name) in KnownTypeResolver
* fixed bug with ACCESS_VIOLATION on iOS (Unity 5.x.x IL2CPP)
* fixed few Unity 3.4 related errors in code
* fixed 'new' expression parsed with error on chained calls new a().b().c()
* fixed some cases of lifted binary/unary/conversion operations
* fixed some AOT'ed operations on System.Boolean type
* fixed null-propagation chains generate invalid code
* fixed some edge cases of resolving nested generic types
* fixed error with types without type.FullName value
* fixed Condition operator types promotion
* fixed Power operator types promotion and null-lifting
* fixed enum constants threated as underlying types during binary/unary operations

Breaking changes
* ParserNode renamed to ParseTreeNode
* ExpressionTree renamed to SyntaxTreeNode
* ExpressionBuilder renamed to Binder
* ITypeResolutionService renamed to ITypeResolver
* ITypeResolver.GetType removed
* ITypeResolver now could be configured with TypeDiscoveryOptions</PackageReleaseNotes>
		<PackageProjectUrl>https://github.com/deniszykov/csharp-eval-unity3d</PackageProjectUrl>
		<PackageLicenseUrl>https://raw.githubusercontent.com/deniszykov/csharp-eval-unity3d/master/License.md</PackageLicenseUrl>
		<Copyright>(c) Denis Zykov, GameDevWare 2017</Copyright>
		<RepositoryUrl>https://github.com/deniszykov/csharp-eval-unity3d</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		<PackageTags>eval parser compiler expressions unity3d aot</PackageTags>
		<PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<Optimize>False</Optimize>
		<DefineConstants>RELEASE</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<DefineConstants>DEBUG;TRACE</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(TargetFramework)' == 'netstandard1.3' ">
		<DefineConstants>$(DefineConstants);NETSTANDARD;</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp2.0' ">
		<DefineConstants>$(DefineConstants);NETSTANDARD;</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(TargetFramework)' == 'net35' ">
		<DefineConstants>$(DefineConstants);NET35</DefineConstants>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(TargetFramework)' == 'net45' ">
		<DefineConstants>$(DefineConstants);NET45</DefineConstants>
	</PropertyGroup>
	<ItemGroup>
		<None Include="Properties\Resources.resx" />
	</ItemGroup>
	<ItemGroup>
		<Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
	</ItemGroup>
	<ItemGroup>
		<Compile Update="Aot.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>Aot.tt</DependentUpon>
		</Compile>
		<Compile Update="UnityResources.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>UnityResources.tt</DependentUpon>
		</Compile>
	</ItemGroup>
	<ItemGroup>
		<None Update="Aot.tt">
			<Generator>TextTemplatingFileGenerator</Generator>
			<LastGenOutput>Aot.cs</LastGenOutput>
		</None>
		<None Update="UnityResources.tt">
			<Generator>TextTemplatingFileGenerator</Generator>
			<LastGenOutput>UnityResources.cs</LastGenOutput>
		</None>
	</ItemGroup>

	<Target Name="CopyDll" AfterTargets="PostBuildEvent" Condition=" '$(TargetFramework)' == 'net35' ">
		<Copy SourceFiles="$(TargetPath)" DestinationFolder="$(ProjectDir)../GameDevWare.Dynamic.Expressions.Unity/Assets/Plugins/GameDevWare.Dynamic.Expressions/" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
	</Target>
</Project>