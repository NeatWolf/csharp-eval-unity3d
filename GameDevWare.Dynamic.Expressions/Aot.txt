
#ExpressionExtentions

	static ExpressionExtentions()
	{
		// AOT
		if (typeof(ExpressionExtentions).Name == string.Empty)
		{
		}
	}
#AotCompilation

	static AotCompilation()
	{
		// AOT
		if (typeof(AotCompilation).Name == string.Empty)
		{
		}
	}
#AssemblyTypeResolutionService

	static AssemblyTypeResolutionService()
	{
		// AOT
		if (typeof(AssemblyTypeResolutionService).Name == string.Empty)
		{
		}
	}
#ExpressionKnownTypeAttribute

	static ExpressionKnownTypeAttribute()
	{
		// AOT
		if (typeof(ExpressionKnownTypeAttribute).Name == string.Empty)
		{
			default(ExpressionKnownTypeAttribute).get_Type();
			default(ExpressionKnownTypeAttribute).set_Type(default(System.Type));
		}
	}
#ExpressionParserException

	static ExpressionParserException()
	{
		// AOT
		if (typeof(ExpressionParserException).Name == string.Empty)
		{
			default(ExpressionParserException).get_LineNumber();
			default(ExpressionParserException).set_LineNumber(default(System.Int32));
			default(ExpressionParserException).get_ColumnNumber();
			default(ExpressionParserException).set_ColumnNumber(default(System.Int32));
			default(ExpressionParserException).get_TokenLength();
			default(ExpressionParserException).set_TokenLength(default(System.Int32));
			default(ExpressionParserException).GetObjectData(default(System.Runtime.Serialization.SerializationInfo),default(System.Runtime.Serialization.StreamingContext));
			default(ExpressionParserException).ToString();
		}
	}
#ExpressionTree

	static ExpressionTree()
	{
		// AOT
		if (typeof(ExpressionTree).Name == string.Empty)
		{
			default(ExpressionTree).get_LineNumber();
			default(ExpressionTree).get_ColumnNumber();
			default(ExpressionTree).get_TokenLength();
			default(ExpressionTree).get_Position();
			default(ExpressionTree).get_OriginalExpression();
			ExpressionTree.PrepareNode(default(System.Collections.Generic.IDictionary`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
		}
	}
#ExpressionVisitor

	static ExpressionVisitor()
	{
		// AOT
		if (typeof(ExpressionVisitor).Name == string.Empty)
		{
			default(ExpressionVisitor).UnhandledBindingType(default(System.Linq.Expressions.MemberBindingType));
			default(ExpressionVisitor).UnhandledExpressionType(default(System.Linq.Expressions.ExpressionType));
			default(ExpressionVisitor).Visit(default(System.Linq.Expressions.Expression));
			default(ExpressionVisitor).VisitBinary(default(System.Linq.Expressions.BinaryExpression));
			default(ExpressionVisitor).VisitBinding(default(System.Linq.Expressions.MemberBinding));
			default(ExpressionVisitor).VisitBindingList(default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.MemberBinding, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			default(ExpressionVisitor).VisitConditional(default(System.Linq.Expressions.ConditionalExpression));
			default(ExpressionVisitor).VisitConstant(default(System.Linq.Expressions.ConstantExpression));
			default(ExpressionVisitor).VisitElementInitializer(default(System.Linq.Expressions.ElementInit));
			default(ExpressionVisitor).VisitElementInitializerList(default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.ElementInit, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			default(ExpressionVisitor).VisitExpressionList(default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			default(ExpressionVisitor).VisitInvocation(default(System.Linq.Expressions.InvocationExpression));
			default(ExpressionVisitor).VisitLambda(default(System.Linq.Expressions.LambdaExpression));
			default(ExpressionVisitor).VisitListInit(default(System.Linq.Expressions.ListInitExpression));
			default(ExpressionVisitor).VisitMemberAccess(default(System.Linq.Expressions.MemberExpression));
			default(ExpressionVisitor).VisitMemberAssignment(default(System.Linq.Expressions.MemberAssignment));
			default(ExpressionVisitor).VisitMemberInit(default(System.Linq.Expressions.MemberInitExpression));
			default(ExpressionVisitor).VisitMemberListBinding(default(System.Linq.Expressions.MemberListBinding));
			default(ExpressionVisitor).VisitMemberMemberBinding(default(System.Linq.Expressions.MemberMemberBinding));
			default(ExpressionVisitor).VisitMethodCall(default(System.Linq.Expressions.MethodCallExpression));
			default(ExpressionVisitor).VisitNew(default(System.Linq.Expressions.NewExpression));
			default(ExpressionVisitor).VisitNewArray(default(System.Linq.Expressions.NewArrayExpression));
			default(ExpressionVisitor).VisitParameter(default(System.Linq.Expressions.ParameterExpression));
			default(ExpressionVisitor).VisitTypeIs(default(System.Linq.Expressions.TypeBinaryExpression));
			default(ExpressionVisitor).VisitUnary(default(System.Linq.Expressions.UnaryExpression));
		}
	}
#ExpressionBuilder

	static ExpressionBuilder()
	{
		// AOT
		if (typeof(ExpressionBuilder).Name == string.Empty)
		{
			default(ExpressionBuilder).get_Parameters();
			default(ExpressionBuilder).get_ResultType();
			default(ExpressionBuilder).get_ContextType();
			default(ExpressionBuilder).Build(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression));
			default(ExpressionBuilder).Build(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression),default(System.Type));
			default(ExpressionBuilder).BuildByType(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression));
			default(ExpressionBuilder).BuildGroup(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression));
			default(ExpressionBuilder).BuildPropertyOrField(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression));
			default(ExpressionBuilder).BuildConstant(default(GameDevWare.Dynamic.Expressions.ExpressionTree));
			default(ExpressionBuilder).BuildIndex(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression));
			default(ExpressionBuilder).BuildCall(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression));
			default(ExpressionBuilder).BuildInvoke(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression));
			default(ExpressionBuilder).BuildDefault(default(GameDevWare.Dynamic.Expressions.ExpressionTree));
			default(ExpressionBuilder).BuildTypeOf(default(GameDevWare.Dynamic.Expressions.ExpressionTree));
			default(ExpressionBuilder).BuildNewArrayBounds(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression));
			default(ExpressionBuilder).BuildNew(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Linq.Expressions.Expression));
			default(ExpressionBuilder).TryBindMethod(default(System.Reflection.ParameterInfo[]),default(System.Collections.Generic.IDictionary`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Linq.Expressions.Expression[]&),default(System.Linq.Expressions.Expression));
			ExpressionBuilder.TryCastTo(default(System.Type),default(System.Linq.Expressions.Expression&));
			ExpressionBuilder.GetMembers(default(System.Type),default(System.Boolean));
			ExpressionBuilder.IsHeirOf(default(System.Type),default(System.Type));
			ExpressionBuilder.IsInRange(default(System.Object),default(System.TypeCode),default(System.Int64),default(System.UInt64));
			ExpressionBuilder.TryExposeConstant(default(System.Linq.Expressions.Expression),default(System.Object&),default(System.Type&));
			ExpressionBuilder.ChangeType(default(System.Object),default(System.Type));
			ExpressionBuilder.GetDefaultValue(default(System.Type));
			ExpressionBuilder.PromoteBothNumerics(default(System.Reflection.MethodInfo),default(System.Object[]));
			ExpressionBuilder.PromoteFirstNumeric(default(System.Reflection.MethodInfo),default(System.Object[]));
			default(ExpressionBuilder).TryGetTypeName(default(System.Object),default(System.String&));
			ExpressionBuilder.DefaultExpression(default(System.Type));
		}
	}
#ILineInfo

	static ILineInfo()
	{
		// AOT
		if (typeof(ILineInfo).Name == string.Empty)
		{
			default(ILineInfo).get_LineNumber();
			default(ILineInfo).get_ColumnNumber();
			default(ILineInfo).get_TokenLength();
		}
	}
#ITypeResolutionService

	static ITypeResolutionService()
	{
		// AOT
		if (typeof(ITypeResolutionService).Name == string.Empty)
		{
			default(ITypeResolutionService).GetType(default(System.String));
			default(ITypeResolutionService).TryGetType(default(System.String),default(System.Type&));
		}
	}
#KnownTypeResolutionService

	static KnownTypeResolutionService()
	{
		// AOT
		if (typeof(KnownTypeResolutionService).Name == string.Empty)
		{
			default(KnownTypeResolutionService).GetType(default(System.String));
			default(KnownTypeResolutionService).TryGetType(default(System.String),default(System.Type&));
			default(KnownTypeResolutionService).GetTypeInternal(default(System.String),default(System.Boolean));
			default(KnownTypeResolutionService).GetKnownTypes(default(System.Collections.Generic.IEnumerable`1[[System.Type, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
		}
	}
#MethodCallSignature

	static MethodCallSignature()
	{
		// AOT
		if (typeof(MethodCallSignature).Name == string.Empty)
		{
			default(MethodCallSignature).Equals(default(System.Object));
			default(MethodCallSignature).GetHashCode();
			default(MethodCallSignature).ComputeHashCode();
			default(MethodCallSignature).ToString();
		}
	}
#Executor

	static Executor()
	{
		// AOT
		if (typeof(Executor).Name == string.Empty)
		{
			Executor.Expression(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.Conditional(default(System.Linq.Expressions.ConditionalExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.Constant(default(System.Linq.Expressions.ConstantExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.Invocation(default(System.Linq.Expressions.InvocationExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.Lambda(default(System.Linq.Expressions.LambdaExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.ListInit(default(System.Linq.Expressions.ListInitExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.MemberAccess(default(System.Linq.Expressions.MemberExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.MemberInit(default(System.Linq.Expressions.MemberInitExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.MemberAssignments(default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.MemberBinding, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.MemberListBindings(default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.MemberBinding, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.MemberMemberBindings(default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.MemberBinding, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.Call(default(System.Linq.Expressions.MethodCallExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.New(default(System.Linq.Expressions.NewExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.NewArray(default(System.Linq.Expressions.NewArrayExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.Parameter(default(System.Linq.Expressions.ParameterExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.TypeIs(default(System.Linq.Expressions.TypeBinaryExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.TypeAs(default(System.Linq.Expressions.UnaryExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.Convert(default(System.Linq.Expressions.UnaryExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.Unary(default(System.Linq.Expressions.UnaryExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.ArrayIndex(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.Binary(default(System.Linq.Expressions.BinaryExpression),default(System.Linq.Expressions.ConstantExpression[]),default(System.Linq.Expressions.ParameterExpression[]));
			Executor.IsNullable(default(System.Linq.Expressions.Expression));
			Executor.CreateUnaryOperationFn(default(System.Reflection.MethodInfo));
			Executor.CreateBinaryOperationFn(default(System.Reflection.MethodInfo));
			Executor.WrapUnaryOperation(default(System.Type),default(System.String));
			Executor.WrapUnaryOperation(default(System.Reflection.MethodInfo));
			Executor.WrapBinaryOperation(default(System.Type),default(System.String));
			Executor.WrapBinaryOperation(default(System.Reflection.MethodInfo));
		}
	}
#ReadOnlyDictionaryExtentions

	static ReadOnlyDictionaryExtentions()
	{
		// AOT
		if (typeof(ReadOnlyDictionaryExtentions).Name == string.Empty)
		{
		}
	}
#UnboundExpression

	static UnboundExpression()
	{
		// AOT
		if (typeof(UnboundExpression).Name == string.Empty)
		{
			default(UnboundExpression).get_ExpressionTree();
			UnboundExpression.CreateParameters(default(System.Type[]),default(System.String[]));
			default(UnboundExpression).Equals(default(System.Object));
			default(UnboundExpression).GetHashCode();
			default(UnboundExpression).ToString();
		}
	}
#Resources

	static Resources()
	{
		// AOT
		if (typeof(Resources).Name == string.Empty)
		{
			Resources.get_ResourceManager();
			Resources.get_Culture();
			Resources.set_Culture(default(System.Globalization.CultureInfo));
			Resources.get_EXCEPTION_BOUNDEXPR_ARGSDOESNTMATCHPARAMS();
			Resources.get_EXCEPTION_BOUNDEXPR_BODYRESULTDOESNTMATCHRESULTTYPE();
			Resources.get_EXCEPTION_BOUNDEXPR_CANTCONVERTARG();
			Resources.get_EXCEPTION_BOUNDEXPR_WRONGNUMPARAMS();
			Resources.get_EXCEPTION_BOUNDEXPR_WRONGPARAMETERTYPE();
			Resources.get_EXCEPTION_BUILD_BUILDFAILED();
			Resources.get_EXCEPTION_BUILD_INVALIDCHARLITERAL();
			Resources.get_EXCEPTION_BUILD_INVALIDCONSTANTEXPRESSION();
			Resources.get_EXCEPTION_BUILD_MISSINGATTRONNODE();
			Resources.get_EXCEPTION_BUILD_RENDERFAILED();
			Resources.get_EXCEPTION_BUILD_UNABLETOBINDCALL();
			Resources.get_EXCEPTION_BUILD_UNABLETOBINDCONSTRUCTOR();
			Resources.get_EXCEPTION_BUILD_UNABLETOBINDDELEG();
			Resources.get_EXCEPTION_BUILD_UNABLETOBINDINDEXER();
			Resources.get_EXCEPTION_BUILD_UNABLETOCREATEEXPRWITHPARAMS();
			Resources.get_EXCEPTION_BUILD_UNABLETOINVOKENONDELEG();
			Resources.get_EXCEPTION_BUILD_UNABLETORESOLVEMEMBERONTYPE();
			Resources.get_EXCEPTION_BUILD_UNABLETORESOLVENAME();
			Resources.get_EXCEPTION_BUILD_UNABLETORESOLVETYPE();
			Resources.get_EXCEPTION_BUILD_UNABLETORESOLVETYPEMULTIPLE();
			Resources.get_EXCEPTION_BUILD_UNKNOWNEXPRTYPE();
			Resources.get_EXCEPTION_COMPIL_NOBINARYOPONTYPE();
			Resources.get_EXCEPTION_COMPIL_NOCONVERTIONBETWEENTYPES();
			Resources.get_EXCEPTION_COMPIL_NOUNARYOPONTYPE();
			Resources.get_EXCEPTION_COMPIL_UNKNOWNBINARYEXPRTYPE();
			Resources.get_EXCEPTION_COMPIL_UNKNOWNEXPRTYPE();
			Resources.get_EXCEPTION_COMPIL_UNKNOWNUNARYEXPRTYPE();
			Resources.get_EXCEPTION_LIST_LISTISEMPTY();
			Resources.get_EXCEPTION_PARSER_BINARYOPREQOPERAND();
			Resources.get_EXCEPTION_PARSER_COLONISEXPRECTED();
			Resources.get_EXCEPTION_PARSER_EXPRESSIONISEMPTY();
			Resources.get_EXCEPTION_PARSER_INVALIDCHILDCOUNTOFNODE();
			Resources.get_EXCEPTION_PARSER_INVALIDCHILDTYPESOFNODE();
			Resources.get_EXCEPTION_PARSER_OPREQUIRESOPERAND();
			Resources.get_EXCEPTION_PARSER_OPREQUIRESSECONDOPERAND();
			Resources.get_EXCEPTION_PARSER_TERNARYOPREQOPERAND();
			Resources.get_EXCEPTION_PARSER_TYPENAMEEXPECTED();
			Resources.get_EXCEPTION_PARSER_UNARYOPREQOPERAND();
			Resources.get_EXCEPTION_PARSER_UNEXPECTEDTOKEN();
			Resources.get_EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEBUILDINGTREE();
			Resources.get_EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEOTHEREXPECTED();
			Resources.get_EXCEPTION_STRINGUTILS_UNEXPECTEDESCAPESEQ();
			Resources.get_EXCEPTION_TOKENIZER_INVALIDCHARLITERAL();
			Resources.get_EXCEPTION_TOKENIZER_UNEXPECTEDSYMBOL();
			Resources.get_EXCEPTION_UNBOUNDEXPR_DUPLICATEPARAMNAME();
			Resources.get_EXCEPTION_UNBOUNDEXPR_INVALIDPARAMCOUNT();
			Resources.get_EXCEPTION_UNBOUNDEXPR_TYPESDOESNTMATCHNAMES();
		}
	}
#CSharpExpression

	static CSharpExpression()
	{
		// AOT
		if (typeof(CSharpExpression).Name == string.Empty)
		{
		}
	}
#CSharpExpressionRenderer

	static CSharpExpressionRenderer()
	{
		// AOT
		if (typeof(CSharpExpressionRenderer).Name == string.Empty)
		{
			CSharpExpressionRenderer.Render(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Boolean));
			CSharpExpressionRenderer.Render(default(System.Linq.Expressions.Expression),default(System.Boolean));
			CSharpExpressionRenderer.Render(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderTypeBinary(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderCondition(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderBinary(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderUnary(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderNew(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderDefault(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder));
			CSharpExpressionRenderer.RenderTypeOf(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder));
			CSharpExpressionRenderer.RenderPropertyOrField(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderConstant(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder));
			CSharpExpressionRenderer.RenderGroup(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderInvokeOrIndex(default(GameDevWare.Dynamic.Expressions.ExpressionTree),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderArguments(default(GameDevWare.Dynamic.Expressions.ReadOnlyDictionary`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.Render(default(System.Linq.Expressions.Expression),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderConvert(default(System.Linq.Expressions.UnaryExpression),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderNewArray(default(System.Linq.Expressions.NewArrayExpression),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderMemberInit(default(System.Linq.Expressions.MemberInitExpression),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderListInit(default(System.Linq.Expressions.ListInitExpression),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderLambda(default(System.Linq.Expressions.LambdaExpression),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderNew(default(System.Linq.Expressions.NewExpression),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderMemberAccess(default(System.Linq.Expressions.MemberExpression),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderCall(default(System.Linq.Expressions.MethodCallExpression),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderArrayIndex(default(System.Linq.Expressions.Expression),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderConstant(default(System.Linq.Expressions.ConstantExpression),default(System.Text.StringBuilder));
			CSharpExpressionRenderer.RenderUnary(default(System.Linq.Expressions.UnaryExpression),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderBinary(default(System.Linq.Expressions.BinaryExpression),default(System.Text.StringBuilder),default(System.Boolean),default(System.Boolean));
			CSharpExpressionRenderer.RenderArguments(default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderMemberBinding(default(System.Linq.Expressions.MemberBinding),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderListInitializer(default(System.Linq.Expressions.ElementInit),default(System.Text.StringBuilder),default(System.Boolean));
			CSharpExpressionRenderer.RenderType(default(System.Type),default(System.Text.StringBuilder));
			CSharpExpressionRenderer.RenderTextLiteral(default(System.String),default(System.Text.StringBuilder),default(System.Boolean));
		}
	}
#DoubleConverter

	static DoubleConverter()
	{
		// AOT
		if (typeof(DoubleConverter).Name == string.Empty)
		{
			DoubleConverter.WriteLiteralTo(default(System.Double),default(System.Text.StringBuilder),default(System.Boolean));
		}
	}
#ListExtentions

	static ListExtentions()
	{
		// AOT
		if (typeof(ListExtentions).Name == string.Empty)
		{
		}
	}
#Parser

	static Parser()
	{
		// AOT
		if (typeof(Parser).Name == string.Empty)
		{
			Parser.Parse(default(System.Collections.Generic.IEnumerable`1[[GameDevWare.Dynamic.Expressions.CSharp.Token, GameDevWare.Dynamic.Expressions, Version=1.0.1.7, Culture=neutral, PublicKeyToken=null]]));
			default(Parser).Expression(default(GameDevWare.Dynamic.Expressions.CSharp.ParserNode),default(GameDevWare.Dynamic.Expressions.CSharp.TokenType[]));
			default(Parser).FindCondClosingToken();
			default(Parser).CheckAndConsumeToken(default(System.String),default(GameDevWare.Dynamic.Expressions.CSharp.TokenType[]));
			default(Parser).CombineUnary(default(GameDevWare.Dynamic.Expressions.CSharp.Token));
			default(Parser).CombineBinary(default(GameDevWare.Dynamic.Expressions.CSharp.Token));
			default(Parser).CombineTernary(default(GameDevWare.Dynamic.Expressions.CSharp.Token));
			default(Parser).ComputePrecedence(default(GameDevWare.Dynamic.Expressions.CSharp.TokenType),default(GameDevWare.Dynamic.Expressions.CSharp.TokenType));
		}
	}
#ParserNode

	static ParserNode()
	{
		// AOT
		if (typeof(ParserNode).Name == string.Empty)
		{
			default(ParserNode).GameDevWare.Dynamic.Expressions.ILineInfo.get_LineNumber();
			default(ParserNode).GameDevWare.Dynamic.Expressions.ILineInfo.get_ColumnNumber();
			default(ParserNode).GameDevWare.Dynamic.Expressions.ILineInfo.get_TokenLength();
			default(ParserNode).ToExpressionTree(default(System.Boolean));
			default(ParserNode).ToTypeName(default(System.Boolean));
			ParserNode.PrepareArguments(default(GameDevWare.Dynamic.Expressions.CSharp.ParserNode),default(System.Boolean));
			ParserNode.Ensure(default(GameDevWare.Dynamic.Expressions.CSharp.ParserNode),default(System.Int32),default(GameDevWare.Dynamic.Expressions.CSharp.TokenType[]));
			default(ParserNode).UnescapeAndUnquote(default(System.String));
			default(ParserNode).Write(default(System.Text.StringBuilder),default(System.Int32));
			default(ParserNode).ToString();
		}
	}
#StringUtils

	static StringUtils()
	{
		// AOT
		if (typeof(StringUtils).Name == string.Empty)
		{
			StringUtils.UnescapeAndUnquote(default(System.String));
			StringUtils.StringToInt32(default(System.String),default(System.Int32),default(System.Int32),default(System.IFormatProvider));
			StringUtils.HexStringToUInt32(default(System.String),default(System.Int32),default(System.Int32));
		}
	}
#TokenAttribute

	static TokenAttribute()
	{
		// AOT
		if (typeof(TokenAttribute).Name == string.Empty)
		{
			default(TokenAttribute).get_Value();
			default(TokenAttribute).set_Value(default(System.String));
		}
	}
#Token

	static Token()
	{
		// AOT
		if (typeof(Token).Name == string.Empty)
		{
			default(Token).get_IsValid();
			default(Token).get_Position();
			default(Token).GameDevWare.Dynamic.Expressions.ILineInfo.get_LineNumber();
			default(Token).GameDevWare.Dynamic.Expressions.ILineInfo.get_ColumnNumber();
			default(Token).GameDevWare.Dynamic.Expressions.ILineInfo.get_TokenLength();
			default(Token).ToString();
		}
	}
#Tokenizer

	static Tokenizer()
	{
		// AOT
		if (typeof(Tokenizer).Name == string.Empty)
		{
			Tokenizer.Tokenize(default(System.String));
			Tokenizer.Match(default(System.String),default(System.Int32),default(System.String));
			Tokenizer.LookForIdentifier(default(System.String),default(System.Int32),default(System.Int32),default(System.Int32));
			Tokenizer.LookForLiteral(default(System.String),default(System.Char),default(System.Int32),default(System.Int32),default(System.Int32));
			Tokenizer.LookForNumber(default(System.String),default(System.Int32),default(System.Int32),default(System.Int32));
		}
	}
#TokenType

	static TokenType()
	{
		// AOT
		if (typeof(TokenType).Name == string.Empty)
		{
		}
	}
#Closure

	static Closure()
	{
		// AOT
		if (typeof(Closure).Name == string.Empty)
		{
		}
	}
#ConstantsCollector

	static ConstantsCollector()
	{
		// AOT
		if (typeof(ConstantsCollector).Name == string.Empty)
		{
			default(ConstantsCollector).VisitConstant(default(System.Linq.Expressions.ConstantExpression));
		}
	}
#InvokeOperation

	static InvokeOperation()
	{
		// AOT
		if (typeof(InvokeOperation).Name == string.Empty)
		{
			default(InvokeOperation).Invoke(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Func`2[[GameDevWare.Dynamic.Expressions.Executor.Closure, GameDevWare.Dynamic.Expressions, Version=1.0.1.7, Culture=neutral, PublicKeyToken=null],[System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]][]));
			default(InvokeOperation).BeginInvoke(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Func`2[[GameDevWare.Dynamic.Expressions.Executor.Closure, GameDevWare.Dynamic.Expressions, Version=1.0.1.7, Culture=neutral, PublicKeyToken=null],[System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]][]),default(System.AsyncCallback),default(System.Object));
			default(InvokeOperation).EndInvoke(default(System.IAsyncResult));
		}
	}
#InvokeOperationCreator

	static InvokeOperationCreator()
	{
		// AOT
		if (typeof(InvokeOperationCreator).Name == string.Empty)
		{
			default(InvokeOperationCreator).Invoke(default(System.Reflection.MethodInfo),default(System.Reflection.ParameterInfo[]));
			default(InvokeOperationCreator).BeginInvoke(default(System.Reflection.MethodInfo),default(System.Reflection.ParameterInfo[]),default(System.AsyncCallback),default(System.Object));
			default(InvokeOperationCreator).EndInvoke(default(System.IAsyncResult));
		}
	}
#MethodCall

	static MethodCall()
	{
		// AOT
		if (typeof(MethodCall).Name == string.Empty)
		{
			MethodCall.TryCreate(default(System.Reflection.MethodInfo));
			MethodCall.TryCreateStaticMethod(default(System.Reflection.MethodInfo));
			MethodCall.TryCreateInstanceMethod(default(System.Reflection.MethodInfo));
		}
	}
#BinaryOperation

	static BinaryOperation()
	{
		// AOT
		if (typeof(BinaryOperation).Name == string.Empty)
		{
			default(BinaryOperation).Invoke(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			default(BinaryOperation).BeginInvoke(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object),default(System.AsyncCallback),default(System.Object));
			default(BinaryOperation).EndInvoke(default(System.IAsyncResult));
		}
	}
#UnaryOperation

	static UnaryOperation()
	{
		// AOT
		if (typeof(UnaryOperation).Name == string.Empty)
		{
			default(UnaryOperation).Invoke(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			default(UnaryOperation).BeginInvoke(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.AsyncCallback),default(System.Object));
			default(UnaryOperation).EndInvoke(default(System.IAsyncResult));
		}
	}
#Intrinsics

	static Intrinsics()
	{
		// AOT
		if (typeof(Intrinsics).Name == string.Empty)
		{
			Intrinsics.BinaryOperation(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object),default(System.Linq.Expressions.ExpressionType),default(GameDevWare.Dynamic.Expressions.Executor.BinaryOperation));
			Intrinsics.UnaryOperation(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Linq.Expressions.ExpressionType),default(GameDevWare.Dynamic.Expressions.Executor.UnaryOperation));
			Intrinsics.Convert(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Type),default(System.Linq.Expressions.ExpressionType),default(GameDevWare.Dynamic.Expressions.Executor.UnaryOperation));
		}
	}
#op_Object

	static op_Object()
	{
		// AOT
		if (typeof(op_Object).Name == string.Empty)
		{
			op_Object.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_Object.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToBoolean(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Object.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_Boolean

	static op_Boolean()
	{
		// AOT
		if (typeof(op_Boolean).Name == string.Empty)
		{
			op_Boolean.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_Boolean.Not(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Boolean.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Boolean.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Boolean.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Boolean.ToBoolean(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_Byte

	static op_Byte()
	{
		// AOT
		if (typeof(op_Byte).Name == string.Empty)
		{
			op_Byte.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_Byte.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Byte.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Byte.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Byte.Not(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Byte.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.And(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ExclusiveOr(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.LeftShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.RightShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.Or(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Byte.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_SByte

	static op_SByte()
	{
		// AOT
		if (typeof(op_SByte).Name == string.Empty)
		{
			op_SByte.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_SByte.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_SByte.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_SByte.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_SByte.Not(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_SByte.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.And(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ExclusiveOr(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.LeftShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.RightShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.Or(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_SByte.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_Int16

	static op_Int16()
	{
		// AOT
		if (typeof(op_Int16).Name == string.Empty)
		{
			op_Int16.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_Int16.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int16.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int16.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int16.Not(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int16.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.And(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ExclusiveOr(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.LeftShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.RightShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.Or(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int16.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_UInt16

	static op_UInt16()
	{
		// AOT
		if (typeof(op_UInt16).Name == string.Empty)
		{
			op_UInt16.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_UInt16.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt16.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt16.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt16.Not(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt16.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.And(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ExclusiveOr(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.LeftShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.RightShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.Or(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt16.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_Int32

	static op_Int32()
	{
		// AOT
		if (typeof(op_Int32).Name == string.Empty)
		{
			op_Int32.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_Int32.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int32.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int32.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int32.Not(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int32.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.And(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ExclusiveOr(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.LeftShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.RightShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.Or(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int32.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_UInt32

	static op_UInt32()
	{
		// AOT
		if (typeof(op_UInt32).Name == string.Empty)
		{
			op_UInt32.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_UInt32.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt32.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt32.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt32.Not(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt32.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.And(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ExclusiveOr(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.LeftShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.RightShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.Or(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt32.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_Int64

	static op_Int64()
	{
		// AOT
		if (typeof(op_Int64).Name == string.Empty)
		{
			op_Int64.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_Int64.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int64.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int64.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int64.Not(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Int64.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.And(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ExclusiveOr(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.LeftShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.RightShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.Or(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Int64.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_UInt64

	static op_UInt64()
	{
		// AOT
		if (typeof(op_UInt64).Name == string.Empty)
		{
			op_UInt64.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_UInt64.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt64.Not(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_UInt64.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.And(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ExclusiveOr(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.LeftShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.RightShift(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.Or(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_UInt64.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_Single

	static op_Single()
	{
		// AOT
		if (typeof(op_Single).Name == string.Empty)
		{
			op_Single.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_Single.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Single.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Single.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Single.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Single.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_Double

	static op_Double()
	{
		// AOT
		if (typeof(op_Double).Name == string.Empty)
		{
			op_Double.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_Double.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Double.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Double.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Double.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Double.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#op_Decimal

	static op_Decimal()
	{
		// AOT
		if (typeof(op_Decimal).Name == string.Empty)
		{
			op_Decimal.Default(default(GameDevWare.Dynamic.Expressions.Executor.Closure));
			op_Decimal.Negate(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Decimal.NegateChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Decimal.UnaryPlus(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object));
			op_Decimal.Add(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.AddChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.Divide(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.Equal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.GreaterThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.GreaterThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.Power(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.LessThan(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.LessThanOrEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.Modulo(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.Multiply(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.MultiplyChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.NotEqual(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.Subtract(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.SubtractChecked(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToObject(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToSByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToByte(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToUInt16(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToUInt32(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToUInt64(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToSingle(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToDouble(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
			op_Decimal.ToDecimal(default(GameDevWare.Dynamic.Expressions.Executor.Closure),default(System.Object),default(System.Object));
		}
	}
#ArbitraryDecimal

	static ArbitraryDecimal()
	{
		// AOT
		if (typeof(ArbitraryDecimal).Name == string.Empty)
		{
			default(ArbitraryDecimal).MultiplyBy(default(System.Int32));
			default(ArbitraryDecimal).Shift(default(System.Int32));
			default(ArbitraryDecimal).Normalize();
			default(ArbitraryDecimal).ToString();
		}
	}
#ParserNodeCollection

	static ParserNodeCollection()
	{
		// AOT
		if (typeof(ParserNodeCollection).Name == string.Empty)
		{
		}
	}
#__StaticArrayInitTypeSize=20

	static __StaticArrayInitTypeSize=20()
	{
		// AOT
		if (typeof(__StaticArrayInitTypeSize=20).Name == string.Empty)
		{
		}
	}
#Expression

	static Expression()
	{
		// AOT
		if (typeof(Expression).Name == string.Empty)
		{
			Expression.Switch(default(System.Type),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.SwitchCase, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateSwitchCaseType(default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Type),default(System.String));
			Expression.SymbolDocument(default(System.String));
			Expression.SymbolDocument(default(System.String),default(System.Guid));
			Expression.SymbolDocument(default(System.String),default(System.Guid),default(System.Guid));
			Expression.SymbolDocument(default(System.String),default(System.Guid),default(System.Guid),default(System.Guid));
			Expression.TryFault(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.TryFinally(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.TryCatch(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.CatchBlock[]));
			Expression.TryCatchFinally(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.CatchBlock[]));
			Expression.MakeTry(default(System.Type),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.CatchBlock, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateTryAndCatchHaveSameType(default(System.Type),default(System.Linq.Expressions.Expression),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.CatchBlock, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.TypeIs(default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.TypeEqual(default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.MakeUnary(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.MakeUnary(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Type),default(System.Reflection.MethodInfo));
			Expression.GetUserDefinedUnaryOperatorOrThrow(default(System.Linq.Expressions.ExpressionType),default(System.String),default(System.Linq.Expressions.Expression));
			Expression.GetUserDefinedUnaryOperator(default(System.Linq.Expressions.ExpressionType),default(System.String),default(System.Linq.Expressions.Expression));
			Expression.GetMethodBasedUnaryOperator(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.GetUserDefinedCoercionOrThrow(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.GetUserDefinedCoercion(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.GetMethodBasedCoercionOperator(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Type),default(System.Reflection.MethodInfo));
			Expression.Negate(default(System.Linq.Expressions.Expression));
			Expression.Negate(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.UnaryPlus(default(System.Linq.Expressions.Expression));
			Expression.UnaryPlus(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.NegateChecked(default(System.Linq.Expressions.Expression));
			Expression.NegateChecked(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.Not(default(System.Linq.Expressions.Expression));
			Expression.Not(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.IsFalse(default(System.Linq.Expressions.Expression));
			Expression.IsFalse(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.IsTrue(default(System.Linq.Expressions.Expression));
			Expression.IsTrue(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.OnesComplement(default(System.Linq.Expressions.Expression));
			Expression.OnesComplement(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.TypeAs(default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.Unbox(default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.Convert(default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.Convert(default(System.Linq.Expressions.Expression),default(System.Type),default(System.Reflection.MethodInfo));
			Expression.ConvertChecked(default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.ConvertChecked(default(System.Linq.Expressions.Expression),default(System.Type),default(System.Reflection.MethodInfo));
			Expression.ArrayLength(default(System.Linq.Expressions.Expression));
			Expression.Quote(default(System.Linq.Expressions.Expression));
			Expression.Rethrow();
			Expression.Rethrow(default(System.Type));
			Expression.Throw(default(System.Linq.Expressions.Expression));
			Expression.Throw(default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.Increment(default(System.Linq.Expressions.Expression));
			Expression.Increment(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.Decrement(default(System.Linq.Expressions.Expression));
			Expression.Decrement(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.PreIncrementAssign(default(System.Linq.Expressions.Expression));
			Expression.PreIncrementAssign(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.PreDecrementAssign(default(System.Linq.Expressions.Expression));
			Expression.PreDecrementAssign(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.PostIncrementAssign(default(System.Linq.Expressions.Expression));
			Expression.PostIncrementAssign(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.PostDecrementAssign(default(System.Linq.Expressions.Expression));
			Expression.PostDecrementAssign(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.MakeOpAssignUnary(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.ListInit(default(System.Linq.Expressions.NewExpression),default(System.Linq.Expressions.ElementInit[]));
			Expression.ListInit(default(System.Linq.Expressions.NewExpression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ElementInit, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Loop(default(System.Linq.Expressions.Expression));
			Expression.Loop(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.LabelTarget));
			Expression.Loop(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.LabelTarget));
			Expression.Bind(default(System.Reflection.MemberInfo),default(System.Linq.Expressions.Expression));
			Expression.Bind(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression));
			Expression.ValidateSettableFieldOrPropertyMember(default(System.Reflection.MemberInfo),default(System.Type&));
			Expression.Field(default(System.Linq.Expressions.Expression),default(System.Reflection.FieldInfo));
			Expression.Field(default(System.Linq.Expressions.Expression),default(System.String));
			Expression.Field(default(System.Linq.Expressions.Expression),default(System.Type),default(System.String));
			Expression.Property(default(System.Linq.Expressions.Expression),default(System.String));
			Expression.Property(default(System.Linq.Expressions.Expression),default(System.Type),default(System.String));
			Expression.Property(default(System.Linq.Expressions.Expression),default(System.Reflection.PropertyInfo));
			Expression.Property(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.GetProperty(default(System.Reflection.MethodInfo));
			Expression.CheckMethod(default(System.Reflection.MethodInfo),default(System.Reflection.MethodInfo));
			Expression.PropertyOrField(default(System.Linq.Expressions.Expression),default(System.String));
			Expression.MakeMemberAccess(default(System.Linq.Expressions.Expression),default(System.Reflection.MemberInfo));
			Expression.MemberInit(default(System.Linq.Expressions.NewExpression),default(System.Linq.Expressions.MemberBinding[]));
			Expression.MemberInit(default(System.Linq.Expressions.NewExpression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.MemberBinding, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ListBind(default(System.Reflection.MemberInfo),default(System.Linq.Expressions.ElementInit[]));
			Expression.ListBind(default(System.Reflection.MemberInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ElementInit, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ListBind(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.ElementInit[]));
			Expression.ListBind(default(System.Reflection.MethodInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ElementInit, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateListInitArgs(default(System.Type),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.ElementInit, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.MemberBind(default(System.Reflection.MemberInfo),default(System.Linq.Expressions.MemberBinding[]));
			Expression.MemberBind(default(System.Reflection.MemberInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.MemberBinding, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.MemberBind(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.MemberBinding[]));
			Expression.MemberBind(default(System.Reflection.MethodInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.MemberBinding, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateGettableFieldOrPropertyMember(default(System.Reflection.MemberInfo),default(System.Type&));
			Expression.ValidateMemberInitArgs(default(System.Type),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.MemberBinding, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Call(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression));
			Expression.Call(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Call(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Call(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Call(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Call(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression[]));
			Expression.Call(default(System.Reflection.MethodInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Call(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.Call(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression[]));
			Expression.Call(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Call(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Call(default(System.Linq.Expressions.Expression),default(System.String),default(System.Type[]),default(System.Linq.Expressions.Expression[]));
			Expression.Call(default(System.Type),default(System.String),default(System.Type[]),default(System.Linq.Expressions.Expression[]));
			Expression.Call(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateMethodAndGetParameters(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.ValidateStaticOrInstanceMethod(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.ValidateCallInstanceType(default(System.Type),default(System.Reflection.MethodInfo));
			Expression.ValidateArgumentTypes(default(System.Reflection.MethodBase),default(System.Linq.Expressions.ExpressionType),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]&));
			Expression.GetParametersForValidation(default(System.Reflection.MethodBase),default(System.Linq.Expressions.ExpressionType));
			Expression.ValidateArgumentCount(default(System.Reflection.MethodBase),default(System.Linq.Expressions.ExpressionType),default(System.Int32),default(System.Reflection.ParameterInfo[]));
			Expression.ValidateOneArgument(default(System.Reflection.MethodBase),default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Reflection.ParameterInfo));
			Expression.TryQuote(default(System.Type),default(System.Linq.Expressions.Expression&));
			Expression.FindMethod(default(System.Type),default(System.String),default(System.Type[]),default(System.Linq.Expressions.Expression[]),default(System.Reflection.BindingFlags));
			Expression.FindBestMethod(default(System.Collections.Generic.IEnumerable`1[[System.Reflection.MethodInfo, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Type[]),default(System.Linq.Expressions.Expression[]),default(System.Reflection.MethodInfo&));
			Expression.IsCompatible(default(System.Reflection.MethodBase),default(System.Linq.Expressions.Expression[]));
			Expression.ApplyTypeArgs(default(System.Reflection.MethodInfo),default(System.Type[]));
			Expression.ArrayIndex(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression[]));
			Expression.ArrayIndex(default(System.Linq.Expressions.Expression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.NewArrayInit(default(System.Type),default(System.Linq.Expressions.Expression[]));
			Expression.NewArrayInit(default(System.Type),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.NewArrayBounds(default(System.Type),default(System.Linq.Expressions.Expression[]));
			Expression.NewArrayBounds(default(System.Type),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.New(default(System.Reflection.ConstructorInfo));
			Expression.New(default(System.Reflection.ConstructorInfo),default(System.Linq.Expressions.Expression[]));
			Expression.New(default(System.Reflection.ConstructorInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.New(default(System.Reflection.ConstructorInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Collections.Generic.IEnumerable`1[[System.Reflection.MemberInfo, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.New(default(System.Reflection.ConstructorInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Reflection.MemberInfo[]));
			Expression.New(default(System.Type));
			Expression.ValidateNewArgs(default(System.Reflection.ConstructorInfo),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]&),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Reflection.MemberInfo, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]&));
			Expression.ValidateAnonymousTypeMember(default(System.Reflection.MemberInfo&),default(System.Type&));
			Expression.Parameter(default(System.Type));
			Expression.Variable(default(System.Type));
			Expression.Parameter(default(System.Type),default(System.String));
			Expression.Variable(default(System.Type),default(System.String));
			Expression.RuntimeVariables(default(System.Linq.Expressions.ParameterExpression[]));
			Expression.RuntimeVariables(default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.SwitchCase(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression[]));
			Expression.SwitchCase(default(System.Linq.Expressions.Expression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Switch(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.SwitchCase[]));
			Expression.Switch(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.SwitchCase[]));
			Expression.Switch(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.SwitchCase[]));
			Expression.Switch(default(System.Type),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.SwitchCase[]));
			Expression.Switch(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.SwitchCase, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			default(Expression).ReduceAndCheck();
			default(Expression).ReduceExtensions();
			default(Expression).ToString();
			default(Expression).get_DebugView();
			Expression.ReturnReadOnly(default(System.Linq.Expressions.IArgumentProvider),default(System.Object&));
			Expression.RequiresCanRead(default(System.Linq.Expressions.Expression),default(System.String));
			Expression.RequiresCanRead(default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.String));
			Expression.RequiresCanWrite(default(System.Linq.Expressions.Expression),default(System.String));
			Expression.Break(default(System.Linq.Expressions.LabelTarget));
			Expression.Break(default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.Expression));
			Expression.Break(default(System.Linq.Expressions.LabelTarget),default(System.Type));
			Expression.Break(default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.Continue(default(System.Linq.Expressions.LabelTarget));
			Expression.Continue(default(System.Linq.Expressions.LabelTarget),default(System.Type));
			Expression.Return(default(System.Linq.Expressions.LabelTarget));
			Expression.Return(default(System.Linq.Expressions.LabelTarget),default(System.Type));
			Expression.Return(default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.Expression));
			Expression.Return(default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.Goto(default(System.Linq.Expressions.LabelTarget));
			Expression.Goto(default(System.Linq.Expressions.LabelTarget),default(System.Type));
			Expression.Goto(default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.Expression));
			Expression.Goto(default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.MakeGoto(default(System.Linq.Expressions.GotoExpressionKind),default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.ValidateGoto(default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.Expression&),default(System.String),default(System.String));
			Expression.ValidateGotoType(default(System.Type),default(System.Linq.Expressions.Expression&),default(System.String));
			Expression.MakeIndex(default(System.Linq.Expressions.Expression),default(System.Reflection.PropertyInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ArrayAccess(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression[]));
			Expression.ArrayAccess(default(System.Linq.Expressions.Expression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Property(default(System.Linq.Expressions.Expression),default(System.String),default(System.Linq.Expressions.Expression[]));
			Expression.FindInstanceProperty(default(System.Type),default(System.String),default(System.Linq.Expressions.Expression[]));
			Expression.GetArgTypesString(default(System.Linq.Expressions.Expression[]));
			Expression.FindProperty(default(System.Type),default(System.String),default(System.Linq.Expressions.Expression[]),default(System.Reflection.BindingFlags));
			Expression.FindBestProperty(default(System.Collections.Generic.IEnumerable`1[[System.Reflection.PropertyInfo, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Linq.Expressions.Expression[]),default(System.Reflection.PropertyInfo&));
			Expression.IsCompatible(default(System.Reflection.PropertyInfo),default(System.Linq.Expressions.Expression[]));
			Expression.Property(default(System.Linq.Expressions.Expression),default(System.Reflection.PropertyInfo),default(System.Linq.Expressions.Expression[]));
			Expression.Property(default(System.Linq.Expressions.Expression),default(System.Reflection.PropertyInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateIndexedProperty(default(System.Linq.Expressions.Expression),default(System.Reflection.PropertyInfo),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]&));
			Expression.ValidateAccessor(default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Reflection.ParameterInfo[]),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]&));
			Expression.ValidateAccessorArgumentTypes(default(System.Reflection.MethodInfo),default(System.Reflection.ParameterInfo[]),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]&));
			Expression.Invoke(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression[]));
			Expression.Invoke(default(System.Linq.Expressions.Expression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.GetInvokeMethod(default(System.Linq.Expressions.Expression));
			Expression.Label(default(System.Linq.Expressions.LabelTarget));
			Expression.Label(default(System.Linq.Expressions.LabelTarget),default(System.Linq.Expressions.Expression));
			Expression.Label();
			Expression.Label(default(System.String));
			Expression.Label(default(System.Type));
			Expression.Label(default(System.Type),default(System.String));
			Expression.CreateLambda(default(System.Type),default(System.Linq.Expressions.Expression),default(System.String),default(System.Boolean),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Lambda(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.ParameterExpression[]));
			Expression.Lambda(default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Linq.Expressions.ParameterExpression[]));
			Expression.Lambda(default(System.Linq.Expressions.Expression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Lambda(default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Lambda(default(System.Type),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.ParameterExpression[]));
			Expression.Lambda(default(System.Type),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Linq.Expressions.ParameterExpression[]));
			Expression.Lambda(default(System.Type),default(System.Linq.Expressions.Expression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Lambda(default(System.Type),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Lambda(default(System.Linq.Expressions.Expression),default(System.String),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Lambda(default(System.Linq.Expressions.Expression),default(System.String),default(System.Boolean),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Lambda(default(System.Type),default(System.Linq.Expressions.Expression),default(System.String),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Lambda(default(System.Type),default(System.Linq.Expressions.Expression),default(System.String),default(System.Boolean),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateLambdaArgs(default(System.Type),default(System.Linq.Expressions.Expression&),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateTryGetFuncActionArgs(default(System.Type[]));
			Expression.GetFuncType(default(System.Type[]));
			Expression.TryGetFuncType(default(System.Type[]),default(System.Type&));
			Expression.GetActionType(default(System.Type[]));
			Expression.TryGetActionType(default(System.Type[]),default(System.Type&));
			Expression.GetDelegateType(default(System.Type[]));
			Expression.ListInit(default(System.Linq.Expressions.NewExpression),default(System.Linq.Expressions.Expression[]));
			Expression.ListInit(default(System.Linq.Expressions.NewExpression),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ListInit(default(System.Linq.Expressions.NewExpression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression[]));
			Expression.ListInit(default(System.Linq.Expressions.NewExpression),default(System.Reflection.MethodInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.GetResultTypeOfShift(default(System.Type),default(System.Type));
			Expression.LeftShift(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.LeftShift(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.LeftShiftAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.LeftShiftAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.LeftShiftAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.RightShift(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.RightShift(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.RightShiftAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.RightShiftAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.RightShiftAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.And(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.And(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.AndAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.AndAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.AndAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.Or(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Or(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.OrAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.OrAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.OrAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.ExclusiveOr(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.ExclusiveOr(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.ExclusiveOrAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.ExclusiveOrAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.ExclusiveOrAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.Power(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Power(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.PowerAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.PowerAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.PowerAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.ArrayIndex(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Block(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Block(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Block(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Block(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Block(default(System.Linq.Expressions.Expression[]));
			Expression.Block(default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Block(default(System.Type),default(System.Linq.Expressions.Expression[]));
			Expression.Block(default(System.Type),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Block(default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Linq.Expressions.Expression[]));
			Expression.Block(default(System.Type),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Linq.Expressions.Expression[]));
			Expression.Block(default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.Block(default(System.Type),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateVariables(default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.ParameterExpression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]),default(System.String));
			Expression.Catch(default(System.Type),default(System.Linq.Expressions.Expression));
			Expression.Catch(default(System.Linq.Expressions.ParameterExpression),default(System.Linq.Expressions.Expression));
			Expression.Catch(default(System.Type),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Catch(default(System.Linq.Expressions.ParameterExpression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.MakeCatchBlock(default(System.Type),default(System.Linq.Expressions.ParameterExpression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Condition(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Condition(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Type));
			Expression.IfThen(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.IfThenElse(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Constant(default(System.Object));
			Expression.Constant(default(System.Object),default(System.Type));
			Expression.DebugInfo(default(System.Linq.Expressions.SymbolDocumentInfo),default(System.Int32),default(System.Int32),default(System.Int32),default(System.Int32));
			Expression.ClearDebugInfo(default(System.Linq.Expressions.SymbolDocumentInfo));
			Expression.ValidateSpan(default(System.Int32),default(System.Int32),default(System.Int32),default(System.Int32));
			Expression.Empty();
			Expression.Default(default(System.Type));
			Expression.MakeDynamic(default(System.Type),default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Linq.Expressions.Expression[]));
			Expression.MakeDynamic(default(System.Type),default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.MakeDynamic(default(System.Type),default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Linq.Expressions.Expression));
			Expression.MakeDynamic(default(System.Type),default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.MakeDynamic(default(System.Type),default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.MakeDynamic(default(System.Type),default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.GetValidMethodForDynamic(default(System.Type));
			Expression.Dynamic(default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Type),default(System.Linq.Expressions.Expression[]));
			Expression.Dynamic(default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Type),default(System.Linq.Expressions.Expression));
			Expression.Dynamic(default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Type),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Dynamic(default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Type),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Dynamic(default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Type),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Dynamic(default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Type),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.MakeDynamic(default(System.Runtime.CompilerServices.CallSiteBinder),default(System.Type),default(System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateDynamicArgument(default(System.Linq.Expressions.Expression));
			Expression.ElementInit(default(System.Reflection.MethodInfo),default(System.Linq.Expressions.Expression[]));
			Expression.ElementInit(default(System.Reflection.MethodInfo),default(System.Collections.Generic.IEnumerable`1[[System.Linq.Expressions.Expression, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]));
			Expression.ValidateElementInitAddMethodInfo(default(System.Reflection.MethodInfo));
			default(Expression).get_NodeType();
			default(Expression).get_Type();
			default(Expression).get_CanReduce();
			default(Expression).Reduce();
			default(Expression).VisitChildren(default(System.Linq.Expressions.ExpressionVisitor));
			default(Expression).Accept(default(System.Linq.Expressions.ExpressionVisitor));
			Expression.Assign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.GetUserDefinedBinaryOperator(default(System.Linq.Expressions.ExpressionType),default(System.String),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean));
			Expression.GetMethodBasedBinaryOperator(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Boolean));
			Expression.GetMethodBasedAssignOperator(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression),default(System.Boolean));
			Expression.GetUserDefinedBinaryOperatorOrThrow(default(System.Linq.Expressions.ExpressionType),default(System.String),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean));
			Expression.GetUserDefinedAssignOperatorOrThrow(default(System.Linq.Expressions.ExpressionType),default(System.String),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.LambdaExpression),default(System.Boolean));
			Expression.GetUserDefinedBinaryOperator(default(System.Linq.Expressions.ExpressionType),default(System.Type),default(System.Type),default(System.String));
			Expression.IsLiftingConditionalLogicalOperator(default(System.Type),default(System.Type),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.ExpressionType));
			Expression.ParameterIsAssignable(default(System.Reflection.ParameterInfo),default(System.Type));
			Expression.ValidateParamswithOperandsOrThrow(default(System.Type),default(System.Type),default(System.Linq.Expressions.ExpressionType),default(System.String));
			Expression.ValidateOperator(default(System.Reflection.MethodInfo));
			Expression.ValidateMethodInfo(default(System.Reflection.MethodInfo));
			Expression.IsNullComparison(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.IsNullConstant(default(System.Linq.Expressions.Expression));
			Expression.ValidateUserDefinedConditionalLogicOperator(default(System.Linq.Expressions.ExpressionType),default(System.Type),default(System.Type),default(System.Reflection.MethodInfo));
			Expression.VerifyOpTrueFalse(default(System.Linq.Expressions.ExpressionType),default(System.Type),default(System.Reflection.MethodInfo));
			Expression.IsValidLiftedConditionalLogicalOperator(default(System.Type),default(System.Type),default(System.Reflection.ParameterInfo[]));
			Expression.MakeBinary(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.MakeBinary(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Reflection.MethodInfo));
			Expression.MakeBinary(default(System.Linq.Expressions.ExpressionType),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.Equal(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Equal(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Reflection.MethodInfo));
			Expression.ReferenceEqual(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.NotEqual(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.NotEqual(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Reflection.MethodInfo));
			Expression.ReferenceNotEqual(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.GetEqualityComparisonOperator(default(System.Linq.Expressions.ExpressionType),default(System.String),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean));
			Expression.GreaterThan(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.GreaterThan(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Reflection.MethodInfo));
			Expression.LessThan(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.LessThan(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Reflection.MethodInfo));
			Expression.GreaterThanOrEqual(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.GreaterThanOrEqual(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Reflection.MethodInfo));
			Expression.LessThanOrEqual(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.LessThanOrEqual(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean),default(System.Reflection.MethodInfo));
			Expression.GetComparisonOperator(default(System.Linq.Expressions.ExpressionType),default(System.String),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Boolean));
			Expression.AndAlso(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.AndAlso(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.OrElse(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.OrElse(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.Coalesce(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Coalesce(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.LambdaExpression));
			Expression.ValidateCoalesceArgTypes(default(System.Type),default(System.Type));
			Expression.Add(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Add(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.AddAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.AddAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.AddAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.ValidateOpAssignConversionLambda(default(System.Linq.Expressions.LambdaExpression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.ExpressionType));
			Expression.AddAssignChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.AddAssignChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.AddAssignChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.AddChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.AddChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.Subtract(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Subtract(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.SubtractAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.SubtractAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.SubtractAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.SubtractAssignChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.SubtractAssignChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.SubtractAssignChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.SubtractChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.SubtractChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.Divide(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Divide(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.DivideAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.DivideAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.DivideAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.Modulo(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Modulo(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.ModuloAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.ModuloAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.ModuloAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.Multiply(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.Multiply(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.MultiplyAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.MultiplyAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.MultiplyAssign(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.MultiplyAssignChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.MultiplyAssignChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.MultiplyAssignChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo),default(System.Linq.Expressions.LambdaExpression));
			Expression.MultiplyChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression));
			Expression.MultiplyChecked(default(System.Linq.Expressions.Expression),default(System.Linq.Expressions.Expression),default(System.Reflection.MethodInfo));
			Expression.IsSimpleShift(default(System.Type),default(System.Type));
		}
	}
