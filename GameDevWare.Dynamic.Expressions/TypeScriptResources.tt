<#@ template debug="false" hostspecific="true" language="C#" linePragmas="true" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Resources" #>
<#@ output extension=".ts" #>
<#
	var resources = ReadResX(this.Host.ResolvePath(@"./Properties/Resources.resx"));
#>
/*
	Copyright (c) 2015 Denis Zykov

	This is part of Charon Game Data Editor Unity Plugin.

	Charon Game Data Editor Unity Plugin is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see http://www.gnu.org/licenses.
*/
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// tslint:disable:max-line-length

export class ExpressionResources {
<#


	foreach(var key in resources.Keys.Cast<string>().OrderBy(k => k))
	{
#>
	public static readonly <#= key #>: string = '<#= Convert.ToString(resources[key]).Replace("\\", "\\\\").Replace("\"", "\\\"").Replace("'", "\\'") #>';
<#
	}
#>
}

<#+
public static Hashtable ReadResX(string path)
{
	var result = new Hashtable(StringComparer.OrdinalIgnoreCase);
	var resourceReader = new ResXResourceReader(File.OpenRead(path));
	foreach(DictionaryEntry  kv in resourceReader)
		result[(string)kv.Key] = kv.Value;

	return result;
}
#>
