/*
	Copyright (c) 2015 Denis Zykov

	This is part of Charon Game Data Editor Unity Plugin.

	Charon Game Data Editor Unity Plugin is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses.
*/
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable once CheckNamespace
// ReSharper disable once EmptyNamespace
// ReSharper disable IdentifierTypo
namespace GameDevWare.Dynamic.Expressions.Properties {

#if UNITY_5 || UNITY_4 || UNITY_3_3 || UNITY_3_4 || UNITY_3_5
    public class Resources
	{
        public const string EXCEPTION_BOUNDEXPR_ARGSDOESNTMATCHPARAMS = "Count of passed arguments doesn't match parameters count.";
        public const string EXCEPTION_BOUNDEXPR_BODYRESULTDOESNTMATCHRESULTTYPE = "Body's result type doesn't match expression's result type.";
        public const string EXCEPTION_BOUNDEXPR_CANTCONVERTARG = "Can't convert argument '{0}' ('{2}') to required type '{1}'.";
        public const string EXCEPTION_BOUNDEXPR_WRONGNUMPARAMS = "Wrong number of parameters. Make sure parameter count matches expression's signature.";
        public const string EXCEPTION_BOUNDEXPR_WRONGPARAMETERTYPE = "One of parameters has invalid type. Make sure parameter types matches expression's signature.";
        public const string EXCEPTION_BUILD_BUILDFAILED = "An error occured while trying to build '{0}' expression: {1}";
        public const string EXCEPTION_BUILD_INVALIDCHARLITERAL = "Invalid char literal '{0}'. It should be one character length.";
        public const string EXCEPTION_BUILD_INVALIDCONSTANTEXPRESSION = "Can't convert constant of type '{0}' to literal representation.";
        public const string EXCEPTION_BUILD_MISSINGATTRONNODE = "Missing or wrong '{0}' attribute on one of expression nodes.";
        public const string EXCEPTION_BUILD_RENDERFAILED = "An error occured while trying to render '{0}' expression: {1}";
        public const string EXCEPTION_BUILD_UNABLETOBINDCALL = "Unable to find method '{0}' on type '{1}' accepting specified arguments.";
        public const string EXCEPTION_BUILD_UNABLETOBINDCONSTRUCTOR = "Unable to find constructor on type '{0}' accepting specified arguments.";
        public const string EXCEPTION_BUILD_UNABLETOBINDDELEG = "Unable to invoke delegate {0}({1}) with specified arguments.";
        public const string EXCEPTION_BUILD_UNABLETOBINDINDEXER = "Unable to find indexing property on type '{0}' accepting specified arguments.";
        public const string EXCEPTION_BUILD_UNABLETOCREATEEXPRWITHPARAMS = "Unable to create '{0}' expression with these '{1}' parameters.";
        public const string EXCEPTION_BUILD_UNABLETOINVOKENONDELEG = "Unable to invoke non-delegate type '{0}'.";
        public const string EXCEPTION_BUILD_UNABLETORESOLVEMEMBERONTYPE = "Unable to find public property or field '{0}' on '{1}'.";
        public const string EXCEPTION_BUILD_UNABLETORESOLVENAME = "Unable to resolve '{0}'. There is no formal parameter with this name.";
        public const string EXCEPTION_BUILD_UNABLETORESOLVETYPE = "Unable to resolve type '{0}'. Known types are: '{1}'.";
        public const string EXCEPTION_BUILD_UNABLETORESOLVETYPEMULTIPLE = "Unable to resolve type '{0}'. Can't choose from: '{1}'.";
        public const string EXCEPTION_BUILD_UNKNOWNEXPRTYPE = "Unknown expression type '{0}'.";
        public const string EXCEPTION_COMPIL_NOBINARYOPONTYPE = "No binary operation '{0}' is defined on type '{1}'.";
        public const string EXCEPTION_COMPIL_NOCONVERTIONBETWEENTYPES = "No conversion operation is defined from '{0}' to '{1}'.";
        public const string EXCEPTION_COMPIL_NOUNARYOPONTYPE = "No unary operation '{0}' is defined on type '{1}'.";
        public const string EXCEPTION_COMPIL_UNKNOWNBINARYEXPRTYPE = "Unknown binary expression type '{0}'.";
        public const string EXCEPTION_COMPIL_UNKNOWNEXPRTYPE = "Unknown expression type {0}.";
        public const string EXCEPTION_COMPIL_UNKNOWNUNARYEXPRTYPE = "Unknown unary expression type '{0}'.";
        public const string EXCEPTION_LIST_LISTISEMPTY = "List is empty.";
        public const string EXCEPTION_PARSER_BINARYOPREQOPERAND = "A binary operation requires two parameters.";
        public const string EXCEPTION_PARSER_COLONISEXPRECTED = "A colon ':' symbol is expected in conditional '?' expression.";
        public const string EXCEPTION_PARSER_EXPRESSIONISEMPTY = "Expression is empty";
        public const string EXCEPTION_PARSER_INVALIDCHILDCOUNTOFNODE = "An invalid children count '{1}' of node '{0}' while {2} is expected.";
        public const string EXCEPTION_PARSER_INVALIDCHILDTYPESOFNODE = "An invalid type of children nodes '{1}' of node '{0}' while '{2}' is expected.";
        public const string EXCEPTION_PARSER_OPREQUIRESOPERAND = "A '{0}' operator requires an operand.";
        public const string EXCEPTION_PARSER_OPREQUIRESSECONDOPERAND = "A '{0}' operator requires a second operand.";
        public const string EXCEPTION_PARSER_TERNARYOPREQOPERAND = "A ternary operation requires three parameters.";
        public const string EXCEPTION_PARSER_TYPENAMEEXPECTED = "A type name is expected.";
        public const string EXCEPTION_PARSER_UNARYOPREQOPERAND = "An unary operation requires one parameter.";
        public const string EXCEPTION_PARSER_UNEXPECTEDTOKEN = "Unexpected token '{0}' in current context.";
        public const string EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEBUILDINGTREE = "Unexpected parser node met '{0}' while building expression tree.";
        public const string EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEOTHEREXPECTED = "A one of these '{0}' tokens are expected.";
        public const string EXCEPTION_STRINGUTILS_UNEXPECTEDESCAPESEQ = "Unknown escape sequence '{0}'.";
        public const string EXCEPTION_TOKENIZER_INVALIDCHARLITERAL = "Invalid char literal.";
        public const string EXCEPTION_TOKENIZER_UNEXPECTEDSYMBOL = "Unexpected symbol '{0}'.";
        public const string EXCEPTION_UNBOUNDEXPR_DUPLICATEPARAMNAME = "Duplicate parameter name '{0}'.";
        public const string EXCEPTION_UNBOUNDEXPR_INVALIDPARAMCOUNT = "Invalid parameters count.";
        public const string EXCEPTION_UNBOUNDEXPR_TYPESDOESNTMATCHNAMES = "Length of types array doesn't match length of names array.";
    }
#endif
}

